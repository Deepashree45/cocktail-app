{"ast":null,"code":"import { NotificationComponent } from './core/components/notification/notification.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./core/services/notification.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"./core/components/toolbar/toolbar.component\";\nimport * as i5 from \"./core/components/notification/notification.component\";\nfunction AppComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"app-toolbar\")(2, \"router-outlet\");\n    i0.ɵɵelementContainerEnd();\n  }\n}\nexport class AppComponent {\n  constructor(notificationService) {\n    this.notificationService = notificationService;\n    this.isOnline = navigator.onLine;\n    this.offlineHandler = () => {\n      if (this.isOnline) {\n        this.isOnline = false;\n        this.notificationService.showError('Internet connection lost.');\n      }\n    };\n    this.onlineHandler = () => {\n      if (!this.isOnline) {\n        this.isOnline = true;\n        this.notificationService.showSuccess('Internet connection restored.');\n      }\n    };\n  }\n  ngAfterViewInit() {\n    this.notificationService.register(this.notificationComp);\n    window.addEventListener('offline', this.offlineHandler);\n    window.addEventListener('online', this.onlineHandler);\n  }\n  ngOnDestroy() {\n    window.removeEventListener('offline', this.offlineHandler);\n    window.removeEventListener('online', this.onlineHandler);\n  }\n  static {\n    this.ɵfac = function AppComponent_Factory(t) {\n      return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.NotificationService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      viewQuery: function AppComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(NotificationComponent, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.notificationComp = _t.first);\n        }\n      },\n      decls: 2,\n      vars: 1,\n      consts: [[4, \"ngIf\"]],\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"app-notification\");\n          i0.ɵɵtemplate(1, AppComponent_ng_container_1_Template, 3, 0, \"ng-container\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isOnline);\n        }\n      },\n      dependencies: [i2.NgIf, i3.RouterOutlet, i4.ToolbarComponent, i5.NotificationComponent],\n      encapsulation: 2\n    });\n  }\n}","map":{"version":3,"names":["NotificationComponent","i0","ɵɵelementContainerStart","ɵɵelement","ɵɵelementContainerEnd","AppComponent","constructor","notificationService","isOnline","navigator","onLine","offlineHandler","showError","onlineHandler","showSuccess","ngAfterViewInit","register","notificationComp","window","addEventListener","ngOnDestroy","removeEventListener","ɵɵdirectiveInject","i1","NotificationService","selectors","viewQuery","AppComponent_Query","rf","ctx","ɵɵtemplate","AppComponent_ng_container_1_Template","ɵɵadvance","ɵɵproperty"],"sources":["E:\\New folder\\cocktail-for-you\\src\\app\\app.component.ts","E:\\New folder\\cocktail-for-you\\src\\app\\app.component.html"],"sourcesContent":["import { Component, AfterViewInit, OnDestroy, ViewChild } from '@angular/core';\nimport { NotificationComponent } from './core/components/notification/notification.component';\nimport { NotificationService } from './core/services/notification.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent implements AfterViewInit, OnDestroy {\n  @ViewChild(NotificationComponent) notificationComp!: NotificationComponent;\n\n  isOnline = navigator.onLine;\n\n  constructor(private notificationService: NotificationService) {}\n\n  private offlineHandler = () => {\n    if (this.isOnline) {\n      this.isOnline = false;\n      this.notificationService.showError('Internet connection lost.');\n    }\n  };\n\n  private onlineHandler = () => {\n    if (!this.isOnline) {\n      this.isOnline = true;\n      this.notificationService.showSuccess('Internet connection restored.');\n    }\n  };\n\n  ngAfterViewInit(): void {\n    this.notificationService.register(this.notificationComp);\n    window.addEventListener('offline', this.offlineHandler);\n    window.addEventListener('online', this.onlineHandler);\n  }\n\n  ngOnDestroy(): void {\n    window.removeEventListener('offline', this.offlineHandler);\n    window.removeEventListener('online', this.onlineHandler);\n  }\n}\n","<app-notification></app-notification>\n\n<ng-container *ngIf=\"isOnline\">\n  <app-toolbar></app-toolbar>\n  <router-outlet></router-outlet>\n</ng-container>\n\n"],"mappings":"AACA,SAASA,qBAAqB,QAAQ,uDAAuD;;;;;;;;;ICC7FC,EAAA,CAAAC,uBAAA,GAA+B;IAC7BD,EAAA,CAAAE,SAAA,kBAA2B;IAE7BF,EAAA,CAAAG,qBAAA,EAAe;;;ADGf,OAAM,MAAOC,YAAY;EAKvBC,YAAoBC,mBAAwC;IAAxC,KAAAA,mBAAmB,GAAnBA,mBAAmB;IAFvC,KAAAC,QAAQ,GAAGC,SAAS,CAACC,MAAM;IAInB,KAAAC,cAAc,GAAG,MAAK;MAC5B,IAAI,IAAI,CAACH,QAAQ,EAAE;QACjB,IAAI,CAACA,QAAQ,GAAG,KAAK;QACrB,IAAI,CAACD,mBAAmB,CAACK,SAAS,CAAC,2BAA2B,CAAC;;IAEnE,CAAC;IAEO,KAAAC,aAAa,GAAG,MAAK;MAC3B,IAAI,CAAC,IAAI,CAACL,QAAQ,EAAE;QAClB,IAAI,CAACA,QAAQ,GAAG,IAAI;QACpB,IAAI,CAACD,mBAAmB,CAACO,WAAW,CAAC,+BAA+B,CAAC;;IAEzE,CAAC;EAd8D;EAgB/DC,eAAeA,CAAA;IACb,IAAI,CAACR,mBAAmB,CAACS,QAAQ,CAAC,IAAI,CAACC,gBAAgB,CAAC;IACxDC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACR,cAAc,CAAC;IACvDO,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACN,aAAa,CAAC;EACvD;EAEAO,WAAWA,CAAA;IACTF,MAAM,CAACG,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAACV,cAAc,CAAC;IAC1DO,MAAM,CAACG,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAACR,aAAa,CAAC;EAC1D;;;uBA9BWR,YAAY,EAAAJ,EAAA,CAAAqB,iBAAA,CAAAC,EAAA,CAAAC,mBAAA;IAAA;EAAA;;;YAAZnB,YAAY;MAAAoB,SAAA;MAAAC,SAAA,WAAAC,mBAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;yBACZ5B,qBAAqB;;;;;;;;;;;;UCTlCC,EAAA,CAAAE,SAAA,uBAAqC;UAErCF,EAAA,CAAA6B,UAAA,IAAAC,oCAAA,0BAGe;;;UAHA9B,EAAA,CAAA+B,SAAA,GAAc;UAAd/B,EAAA,CAAAgC,UAAA,SAAAJ,GAAA,CAAArB,QAAA,CAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}