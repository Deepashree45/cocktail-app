{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/notification.service\";\nexport class ErrorInterceptor {\n  constructor(notification) {\n    this.notification = notification;\n  }\n  intercept(req, next) {\n    return next.handle(req).pipe(catchError(error => {\n      let message = 'An unexpected error occurred.';\n      if (error.status === 0) {\n        message = 'Cannot connect to the server.';\n      } else if (error.status >= 500) {\n        message = 'Server error occurred. Please try again later.';\n      } else if (error.status >= 400) {\n        message = 'Request failed.';\n      }\n      this.notification.showError(message);\n      return throwError(() => error);\n    }));\n  }\n  static {\n    this.ɵfac = function ErrorInterceptor_Factory(t) {\n      return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.NotificationService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ErrorInterceptor,\n      factory: ErrorInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["catchError","throwError","ErrorInterceptor","constructor","notification","intercept","req","next","handle","pipe","error","message","status","showError","i0","ɵɵinject","i1","NotificationService","factory","ɵfac"],"sources":["E:\\COCKTAIL-APP-ASSIGNMENT\\cocktail-for-you\\src\\app\\core\\interceptors\\error.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { NotificationService } from '../services/notification.service';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n  constructor(private notification: NotificationService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req).pipe(\n      catchError((error: HttpErrorResponse) => {\n        let message = 'An unexpected error occurred.';\n\n        if (error.status === 0) {\n          message = 'Cannot connect to the server.';\n        } else if (error.status >= 500) {\n          message = 'Server error occurred. Please try again later.';\n        } else if (error.status >= 400) {\n          message = 'Request failed.';\n        }\n\n        this.notification.showError(message);\n        return throwError(() => error);\n      })\n    );\n  }\n}\n"],"mappings":"AAQA,SAAqBA,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;AAIzD,OAAM,MAAOC,gBAAgB;EAC3BC,YAAoBC,YAAiC;IAAjC,KAAAA,YAAY,GAAZA,YAAY;EAAwB;EAExDC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,OAAOA,IAAI,CAACC,MAAM,CAACF,GAAG,CAAC,CAACG,IAAI,CAC1BT,UAAU,CAAEU,KAAwB,IAAI;MACtC,IAAIC,OAAO,GAAG,+BAA+B;MAE7C,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;QACtBD,OAAO,GAAG,+BAA+B;OAC1C,MAAM,IAAID,KAAK,CAACE,MAAM,IAAI,GAAG,EAAE;QAC9BD,OAAO,GAAG,gDAAgD;OAC3D,MAAM,IAAID,KAAK,CAACE,MAAM,IAAI,GAAG,EAAE;QAC9BD,OAAO,GAAG,iBAAiB;;MAG7B,IAAI,CAACP,YAAY,CAACS,SAAS,CAACF,OAAO,CAAC;MACpC,OAAOV,UAAU,CAAC,MAAMS,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;;;uBApBWR,gBAAgB,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,mBAAA;IAAA;EAAA;;;aAAhBf,gBAAgB;MAAAgB,OAAA,EAAhBhB,gBAAgB,CAAAiB;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}