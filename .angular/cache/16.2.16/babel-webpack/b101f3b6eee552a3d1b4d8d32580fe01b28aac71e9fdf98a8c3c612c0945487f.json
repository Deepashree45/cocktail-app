{"ast":null,"code":"import { of, map, tap } from 'rxjs';\nimport { mapToCocktailList } from '../utils/cocktail.utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CocktailService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'https://www.thecocktaildb.com/api/json/v1/1';\n    this.cache = new Map();\n  }\n  getCocktailByName(name) {\n    const key = name.toLowerCase();\n    if (this.cache.has(key)) {\n      // Return cached data as observable\n      return of(this.cache.get(key));\n    }\n    return this.http.get(`${this.baseUrl}/search.php?s=${name}`).pipe(map(res => mapToCocktailList(res.drinks)), tap(cocktails => {\n      // Cache the response\n      this.cache.set(key, cocktails);\n    }));\n  }\n  static {\n    this.ɵfac = function CocktailService_Factory(t) {\n      return new (t || CocktailService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CocktailService,\n      factory: CocktailService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["of","map","tap","mapToCocktailList","CocktailService","constructor","http","baseUrl","cache","Map","getCocktailByName","name","key","toLowerCase","has","get","pipe","res","drinks","cocktails","set","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["E:\\New folder\\cocktail-for-you\\src\\app\\core\\services\\cocktail.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of, map, tap } from 'rxjs';\nimport { CocktailAPIModel } from '../models/cocktail-api.model';\nimport { mapToCocktailList } from '../utils/cocktail.utils';\n\n@Injectable({ providedIn: 'root' })\nexport class CocktailService {\n  private readonly baseUrl = 'https://www.thecocktaildb.com/api/json/v1/1';\n\n  private cache = new Map<string, CocktailAPIModel[]>();\n\n  constructor(private http: HttpClient) {}\n\n  getCocktailByName(name: string): Observable<CocktailAPIModel[]> {\n    const key = name.toLowerCase();\n\n    if (this.cache.has(key)) {\n      // Return cached data as observable\n      return of(this.cache.get(key)!);\n    }\n\n    return this.http.get<any>(`${this.baseUrl}/search.php?s=${name}`).pipe(\n      map((res) => mapToCocktailList(res.drinks)),\n      tap((cocktails) => {\n        // Cache the response\n        this.cache.set(key, cocktails);\n      })\n    );\n  }\n}\n"],"mappings":"AAEA,SAAqBA,EAAE,EAAEC,GAAG,EAAEC,GAAG,QAAQ,MAAM;AAE/C,SAASC,iBAAiB,QAAQ,yBAAyB;;;AAG3D,OAAM,MAAOC,eAAe;EAK1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJP,KAAAC,OAAO,GAAG,6CAA6C;IAEhE,KAAAC,KAAK,GAAG,IAAIC,GAAG,EAA8B;EAEd;EAEvCC,iBAAiBA,CAACC,IAAY;IAC5B,MAAMC,GAAG,GAAGD,IAAI,CAACE,WAAW,EAAE;IAE9B,IAAI,IAAI,CAACL,KAAK,CAACM,GAAG,CAACF,GAAG,CAAC,EAAE;MACvB;MACA,OAAOZ,EAAE,CAAC,IAAI,CAACQ,KAAK,CAACO,GAAG,CAACH,GAAG,CAAE,CAAC;;IAGjC,OAAO,IAAI,CAACN,IAAI,CAACS,GAAG,CAAM,GAAG,IAAI,CAACR,OAAO,iBAAiBI,IAAI,EAAE,CAAC,CAACK,IAAI,CACpEf,GAAG,CAAEgB,GAAG,IAAKd,iBAAiB,CAACc,GAAG,CAACC,MAAM,CAAC,CAAC,EAC3ChB,GAAG,CAAEiB,SAAS,IAAI;MAChB;MACA,IAAI,CAACX,KAAK,CAACY,GAAG,CAACR,GAAG,EAAEO,SAAS,CAAC;IAChC,CAAC,CAAC,CACH;EACH;;;uBAtBWf,eAAe,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAfpB,eAAe;MAAAqB,OAAA,EAAfrB,eAAe,CAAAsB,IAAA;MAAAC,UAAA,EADF;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}